import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { OpenAI } from 'openai';

export const runtime = 'nodejs';

// üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á Supabase Server Client ‡∏î‡πâ‡∏ß‡∏¢ Service Role (‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡πÉ‡∏ô client!)
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY!
);

// üß† ‡∏™‡∏£‡πâ‡∏≤‡∏á OpenAI Client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

export async function POST(req: NextRequest) {
  try {
    const { user_id } = await req.json();
    console.log('üîë user_id:', user_id);

    // ‡πÄ‡∏ä‡πá‡∏Å user_id ‡∏ï‡∏£‡∏á‡πÜ
    if (!user_id || typeof user_id !== 'string') {
      return NextResponse.json({ error: 'user_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' }, { status: 400 });
    }

    // üîé ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• portfolio input ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const { data, error } = await supabase
      .from('portfolio_inputs')
      .select('*')
      .eq('user_id', user_id)
      .limit(1);

    if (error) {
      console.error('üõë Supabase error:', error);
      return NextResponse.json({ error: 'Supabase query ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß' }, { status: 500 });
    }

    if (!data || data.length === 0) {
      return NextResponse.json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' }, { status: 404 });
    }

    // Define a type for project
    type Project = {
      title: string;
      description: string;
    };

    const input = data[0] as typeof data[0] & { projects?: Project[] };
    console.log('üßæ input:', input);

    // üß† ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡πÉ‡∏´‡πâ AI
    const prompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Portfolio ‡∏î‡πâ‡∏ß‡∏¢ HTML markup

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:
- ‡∏ä‡∏∑‡πà‡∏≠: ${input.name}
- ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô: ${input.bio}
- ‡∏ó‡∏±‡∏Å‡∏©‡∏∞: ${input.skills?.join(', ') ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ'}
- ‡∏•‡∏¥‡∏á‡∏Å‡πå: ${input.links?.join(', ') ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ'}

‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå:
${(input.projects as Project[])
  ?.map((p, i) => `${i + 1}. ${p.title}: ${p.description}`)
  .join('\n') ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå'}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö Portfolio ‡πÅ‡∏ö‡∏ö responsive ‡πÇ‡∏î‡∏¢‡∏°‡∏µ section: Hero, About, Skills, Projects, Contact
`;

    // üöÄ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å AI
    const completion = await openai.chat.completions.create({
      model: 'gpt-4-turbo',
      messages: [
        { role: 'system', content: '‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Portfolio ‡∏î‡πâ‡∏ß‡∏¢ HTML ‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°' },
        { role: 'user', content: prompt },
      ],
      temperature: 0.7,
    });

    const aiContent = completion.choices[0]?.message?.content;

    if (!aiContent) {
      return NextResponse.json({ error: 'AI ‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤' }, { status: 500 });
    }

    return NextResponse.json({ content: aiContent });
  } catch (err) {
    console.error('üí• Unexpected error:', err);
    return NextResponse.json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô' }, { status: 500 });
  }
}