"use client";
import { useState } from "react";
import { supabase } from "@/libs/supabaseClient";
import { useEffect } from "react";

interface Project {
  title: string;
  description: string;
}

export default function ProfileForm() {
  const [name, setName] = useState("");
  const [bio, setBio] = useState("");
  const [skills, setSkills] = useState("");
  const [aiResult] = useState("");
  const [generating, setGenerating] = useState(false);
  const [projects, setProjects] = useState<Project[]>([
    { title: "", description: "" },
  ]);
  const [links, setLinks] = useState("");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    await handleSaveToSupabase();
    // TODO: POST ‡πÑ‡∏õ‡∏¢‡∏±‡∏á /api/generate-portfolio ‡∏´‡∏£‡∏∑‡∏≠ Supabase
  };

  const addProject = () => {
    setProjects([...projects, { title: "", description: "" }]);
  };

  const updateProject = (index: number, key: keyof Project, value: string) => {
    const updated = [...projects];
    updated[index][key] = value;
    setProjects(updated);
  };

  const handleSaveToSupabase = async () => {
    const { data: sessionData } = await supabase.auth.getSession();
    const user = sessionData.session?.user;

    if (!user) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
      return;
    }

    const payload = {
      user_id: user.id,
      name,
      bio,
      skills: skills.split(",").map((s) => s.trim()),
      projects,
      links: links.split(",").map((l) => l.trim()),
      style_preference: "", // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
      updated_at: new Date().toISOString(),
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const { data: existing, error: fetchError } = await supabase
      .from("portfolio_inputs")
      .select("id")
      .eq("user_id", user.id)
      .single();

    if (fetchError && fetchError.code !== "PGRST116") {
      alert("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏î‡πâ");
      return;
    }

    let result;
    if (existing) {
      // update
      result = await supabase
        .from("portfolio_inputs")
        .update(payload)
        .eq("user_id", user.id);
    } else {
      // insert
      result = await supabase.from("portfolio_inputs").insert(payload);
    }

    if (result.error) {
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: " + result.error.message);
    } else {
      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à üéâ");
    }
  };

  useEffect(() => {
    const fetchPortfolioInputs = async () => {
      const { data: sessionData } = await supabase.auth.getSession();
      const user = sessionData.session?.user;

      if (!user) return;

      const { data, error } = await supabase
        .from("portfolio_inputs")
        .select("*")
        .eq("user_id", user.id)
        .single();

      if (error) {
        console.warn("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• portfolio ‡πÄ‡∏î‡∏¥‡∏°:", error.message);
        return;
      }

      // ‚úÖ ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ state
      setName(data.name || "");
      setBio(data.bio || "");
      setSkills(data.skills?.join(", ") || "");
      setLinks(data.links?.join(", ") || "");
      setProjects(data.projects || [{ title: "", description: "" }]);
    };

    fetchPortfolioInputs();
  }, []);

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div>
        <label className="block font-medium">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
        <input
          type="text"
          value={name}
          onChange={(e) => setName(e.target.value)}
          className="w-full p-2 border rounded"
        />
      </div>

      <div>
        <label className="block font-medium">‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏±‡∏ß (About Me)</label>
        <textarea
          value={bio}
          onChange={(e) => setBio(e.target.value)}
          rows={4}
          className="w-full p-2 border rounded"
        />
      </div>

      <div>
        <label className="block font-medium">‡∏ó‡∏±‡∏Å‡∏©‡∏∞ (Skills)</label>
        <input
          type="text"
          placeholder="‡πÄ‡∏ä‡πà‡∏ô JavaScript, UX Design"
          value={skills}
          onChange={(e) => setSkills(e.target.value)}
          className="w-full p-2 border rounded"
        />
      </div>

      <div>
        <label className="block font-medium">‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå</label>
        {projects.map((project, i) => (
          <div
            key={i}
            className="mb-4 border rounded p-3 bg-white dark:bg-gray-800"
          >
            <input
              type="text"
              placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå"
              value={project.title}
              onChange={(e) => updateProject(i, "title", e.target.value)}
              className="w-full mb-2 p-2 border rounded"
            />
            <textarea
              placeholder="‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå"
              value={project.description}
              onChange={(e) => updateProject(i, "description", e.target.value)}
              className="w-full p-2 border rounded"
              rows={3}
            />
          </div>
        ))}
        <button
          type="button"
          onClick={addProject}
          className="text-sm text-blue-600 underline"
        >
          + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
        </button>
      </div>

      <div>
        <label className="block font-medium">
          ‡∏•‡∏¥‡∏á‡∏Å‡πå (GitHub, LinkedIn, ‡∏Ø‡∏•‡∏Ø)
        </label>
        <input
          type="text"
          placeholder="‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ , ‡πÄ‡∏ä‡πà‡∏ô github.com/me, linkedin.com/in/me"
          value={links}
          onChange={(e) => setLinks(e.target.value)}
          className="w-full p-2 border rounded"
        />
      </div>

      <button
        type="submit"
        className="bg-black text-white py-2 px-6 rounded hover:bg-gray-800"
      >
        ‡∏™‡∏£‡πâ‡∏≤‡∏á Portfolio ‡∏î‡πâ‡∏ß‡∏¢ AI üöÄ
      </button>
      <button
        type="button"
        onClick={async () => {
          console.log("üü¢ CLICKED Generate AI Button");
          setGenerating(true);

          const { data: sessionData } = await supabase.auth.getSession();
          const user = sessionData.session?.user;
          if (!user) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");

          const res = await fetch("/api/generate-portfolio", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ user_id: user.id }), // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô object
          });
          const data = await res.json();
          console.log("üéØ Portfolio response:", data);

          setGenerating(false);
        }}
        className="bg-blue-600 text-white py-2 px-6 rounded hover:bg-blue-700 transition"
        disabled={generating}
      >
        {generating ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ AI..." : "Generate Portfolio ‡∏î‡πâ‡∏ß‡∏¢ AI üöÄ"}
      </button>
      {aiResult && (
        <div className="mt-8 border rounded p-4 bg-gray-100 dark:bg-gray-800 text-sm whitespace-pre-wrap">
          <h2 className="font-semibold mb-2">‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å AI üëá</h2>
          <pre>{aiResult}</pre>
        </div>
      )}
    </form>
  );
}
